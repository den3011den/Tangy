@page "/orderList"
@inject IOrderRepository _orderRepository
@inject NavigationManager _navigationManager
@attribute [Authorize]

<div>
    <h4 class="card-title text-info">Список заказов</h4>

    @if (OrderHeaders.Any())
    {
        <RadzenDataGrid AllowFiltering="true" AllowColumnResize="true" FilterMode="FilterMode.Advanced" AllowSorting="true" PageSize="5" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true"
                    Data="OrderHeaders" TItem="OrderHeaderDTO" LogicalFilterOperator="LogicalFilterOperator.Or">
            <Columns>
                <RadzenDataGridColumn TItem="OrderHeaderDTO" Property="Id" Filterable="false" Title="Номер" Frozen="true" />
                <RadzenDataGridColumn TItem="OrderHeaderDTO" Property="Name" Title="Имя" Frozen="true" />
                <RadzenDataGridColumn TItem="OrderHeaderDTO" Property="PhoneNumber" Title="Телефон" />
                <RadzenDataGridColumn TItem="OrderHeaderDTO" Property="Email" Title="Почта" />
                <RadzenDataGridColumn TItem="OrderHeaderDTO" Property="OrderTotal" Title="Итого" />
                <RadzenDataGridColumn TItem="OrderHeaderDTO" Property="OrderDate" Title="Дата заказа" FormatString="{0:d}" />
                <RadzenDataGridColumn TItem="OrderHeaderDTO" Property="Status" Title="Статус" />
                <RadzenDataGridColumn TItem="OrderHeaderDTO" Title="Детали">
                    <Template Context="data">
                        <RadzenButton Click="(args => OrderDetails(data.Id))" Text="Детали" ButtonStyle="ButtonStyle.Success"></RadzenButton>
                    </Template>
                </RadzenDataGridColumn>
            </Columns>
        </RadzenDataGrid>
    }
    else
    {
        if (IsLoading)
        {
            //отображение gif загрузки
            <div class="text-center">
                <img src="/images/loading.gif">
            </div>

        }
    }
</div>

@code {
    private IEnumerable<OrderHeaderDTO> OrderHeaders { get; set; } = new List<OrderHeaderDTO>();
    private bool IsLoading { get; set; } = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadOrders();
        }
    }

    private async Task LoadOrders()
    {
        IsLoading = true;
        StateHasChanged();

        var Orders = await _orderRepository.GetAll();
        OrderHeaders = Orders.Select(u => u.OrderHeader);

        IsLoading = false;
        StateHasChanged();
    }

    private void OrderDetails(int id)
    {
        _navigationManager.NavigateTo("/order/details/" + id);
    }

}
